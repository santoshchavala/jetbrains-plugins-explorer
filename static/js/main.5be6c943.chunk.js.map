{"version":3,"sources":["Extensions.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Extensions","plugin","branch","extensions","repository","toPairs","map","key","entries","entry","href","StyledSelect","styled","App","useState","data","setData","selectedExtensions","setSelectedExtensions","useEffect","axios","get","then","response","plugins","handleExtensionsChange","useCallback","v","flatten","reduce","acc","concat","keys","filteredData","filter","isEmpty","difference","columns","title","dataIndex","render","name","id","downloads","replace","align","lastUpdateDate","date","length","tags","tag","filters","sortBy","uniqBy","text","value","onFilter","record","undefined","find","dataSource","expandable","expandedRowRender","rowExpandable","loading","rowKey","allowClear","mode","placeholder","size","onChange","extension","Option","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5be6c943.chunk.js","sourcesContent":["import { toPairs } from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport { Plugin } from 'types';\n\ninterface Props {\n  plugin: Plugin;\n}\n\nconst Extensions: FunctionComponent<Props> = ({ plugin: { branch, extensions, repository } }) => (\n  <div>\n    <strong>Available extensions:</strong>\n    <ul>\n      {toPairs<string[]>(extensions).map(([key, entries]) => (\n        <li key={key}>\n          {key}:\n          <ul>\n            {entries.map(entry => (\n              <li key={entry}>\n                <a href={`https://github.com/${repository}/blob/${branch}/${entry}`}>{entry}</a>\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default Extensions;\n","import TimeAgo from 'react-timeago';\nimport styled from '@emotion/styled';\nimport { difference, flatten, isEmpty, keys, sortBy, uniqBy } from 'lodash';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Select, Table, Tag } from 'antd';\nimport { Plugin } from 'types';\nimport { ColumnsType } from 'antd/lib/table/interface';\nimport Extensions from './Extensions';\n\nconst DATA_URL =\n  'https://raw.githubusercontent.com/hsz/jetbrains-plugins-repositories-list/master/data.json';\n\nconst columns = (plugins: Plugin[]): ColumnsType<Plugin> => {\n  const tagsFilters = sortBy(\n    uniqBy(\n      flatten(plugins.map(({ tags }) => tags)).map(({ name, id }) => ({\n        text: name,\n        value: `${id}`,\n      })),\n      'text',\n    ),\n    'text',\n  );\n\n  return [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      render: (name, plugin) => (\n        <a href={`https://plugins.jetbrains.com/plugin/${plugin.id}`}>{name}</a>\n      ),\n    },\n    {\n      title: 'Repository',\n      dataIndex: 'repository',\n      render: repository => <a href={`https://github.com/${repository}`}>{repository}</a>,\n    },\n    {\n      title: 'Downloads',\n      dataIndex: 'downloads',\n      render: downloads => `${downloads}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' '),\n      align: 'right',\n    },\n    {\n      title: 'Last updated',\n      dataIndex: 'lastUpdateDate',\n      render: lastUpdateDate => <TimeAgo date={lastUpdateDate} />,\n    },\n    {\n      title: 'Extensions',\n      dataIndex: 'extensions',\n      render: extensions => <Tag>{keys(extensions).length}</Tag>,\n      align: 'center',\n    },\n    {\n      title: 'Tags',\n      dataIndex: 'tags',\n      render: (tags: Plugin['tags']) => tags.map(tag => <Tag key={tag.id}>{tag.name}</Tag>),\n      filters: tagsFilters,\n      onFilter: (value, record) => record.tags.find(tag => tag.id === +value) !== undefined,\n    },\n  ];\n};\n\nconst StyledSelect = styled(Select)`\n  width: 100%;\n`;\n\nconst App = () => {\n  const [data, setData] = useState<Plugin[]>([]);\n  const [selectedExtensions, setSelectedExtensions] = useState<string[]>([]);\n\n  useEffect(() => {\n    axios.get(DATA_URL).then(response => {\n      setData(response.data);\n    });\n  }, []);\n\n  const handleExtensionsChange = useCallback(v => {\n    setSelectedExtensions(v);\n  }, []);\n\n  const extensions = flatten(\n    data.reduce<string[]>((acc, plugin) => acc.concat(keys(plugin.extensions)), []),\n  );\n  const filteredData = data.filter(plugin =>\n    isEmpty(difference(selectedExtensions, keys(plugin.extensions))),\n  );\n\n  return (\n    <Table\n      columns={columns(data)}\n      dataSource={filteredData}\n      expandable={{\n        expandedRowRender: record => <Extensions plugin={record} />,\n        rowExpandable: record => !isEmpty(record.extensions),\n      }}\n      loading={isEmpty(data)}\n      rowKey=\"id\"\n      title={() => (\n        <StyledSelect\n          allowClear\n          mode=\"multiple\"\n          placeholder=\"Please select extensions\"\n          size=\"large\"\n          onChange={handleExtensionsChange}\n        >\n          {extensions.map(extension => (\n            <Select.Option key={extension} value={extension}>\n              {extension}\n            </Select.Option>\n          ))}\n        </StyledSelect>\n      )}\n    />\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}